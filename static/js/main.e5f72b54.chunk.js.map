{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","generateColor","generateQuote","randomNumber","Math","floor","random","state","quotesArrayLength","setState","author","apiResult","text","quote","colorArray","length","bgColor","shareOnTwitter","window","open","concat","isLoaded","_this2","fetch","headers","Accept","then","response","json","responseData","quotes","catch","err","error","react_default","a","createElement","id","className","href","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiKeA,qBA5Jb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,YAAc,WACZP,EAAKQ,gBACLR,EAAKS,iBAZYT,EAwCnBS,cAAgB,WAEd,IAAMC,EAAeC,KAAKC,MACxBD,KAAKE,SAAWb,EAAKc,MAAMC,kBAAoB,GAEjDf,EAAKgB,SAAS,CACZC,OAAQjB,EAAKc,MAAMI,UAAUR,GAAcO,OAC3CE,KAAMnB,EAAKc,MAAMI,UAAUR,GAAcU,SA/C1BpB,EAmDnBQ,cAAgB,WACd,IAAIa,EAAa,CACf,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGEX,EAAeC,KAAKC,MAAMD,KAAKE,SAAWQ,EAAWC,OAAS,GAClEtB,EAAKgB,SAAS,CACZO,QAASF,EAAWX,MA3GLV,EA+GnBwB,eAAiB,WACfC,OAAOC,KAAP,yCAAAC,OAAqD3B,EAAKc,MAAMK,QA9GhEnB,EAAKc,MAAQ,CACXI,UAAW,KACXD,OAAQ,GACRE,KAAM,GACNS,UAAU,EACVL,QAAS,WAPMvB,mFAcC,IAAA6B,EAAA1B,KAClB2B,MACE,yIACA,CACEC,QAAS,CACPC,OAAQ,sBAIXC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GACJP,EAAKb,SAAS,CACZE,UAAWkB,EAAaC,OACxBT,UAAU,EACVX,OAAQmB,EAAaC,OAAO,GAAGpB,OAC/BE,KAAMiB,EAAaC,OAAO,GAAGjB,MAC7BL,kBAAmBqB,EAAaC,OAAOf,WAG1CgB,MAAM,SAAAC,GACLV,EAAKb,SAAS,CACZwB,MAAOD,uCAgFb,OACEE,EAAAC,EAAAC,cAAA,OAAKC,GAAG,QACNH,EAAAC,EAAAC,cAAA,wEAAAhB,OAG2BxB,KAAKW,MAAMS,QAHtC,+DASAkB,EAAAC,EAAAC,cAAA,MAAIC,GAAG,SAAP,wBACAH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,WACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QAAN,KAAgBzC,KAAKW,MAAMK,KAA3B,MACAsB,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UAAN,KAAkBzC,KAAKW,MAAMG,SAG/BwB,EAAAC,EAAAC,cAAA,OAAKC,GAAG,UACNH,EAAAC,EAAAC,cAAA,KACEE,UAAU,SACVD,GAAG,cACHE,KAAM,yCAA2C3C,KAAKW,MAAMK,MAH9D,QAKQ,KAGRsB,EAAAC,EAAAC,cAAA,UACEE,UAAU,SACVD,GAAG,YACHG,QAAS5C,KAAKI,aAHhB,uBA/IMyC,cCQEC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.e5f72b54.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      apiResult: null,\n      author: \"\",\n      text: \"\",\n      isLoaded: false,\n      bgColor: \"#f99192\"\n    };\n  }\n  handleClick = () => {\n    this.generateColor();\n    this.generateQuote();\n  };\n  componentDidMount() {\n    fetch(\n      \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\",\n      {\n        headers: {\n          Accept: \"application/json\"\n        }\n      }\n    )\n      .then(response => response.json())\n      .then(responseData => {\n        this.setState({\n          apiResult: responseData.quotes,\n          isLoaded: true,\n          author: responseData.quotes[0].author,\n          text: responseData.quotes[0].quote,\n          quotesArrayLength: responseData.quotes.length\n        });\n      })\n      .catch(err => {\n        this.setState({\n          error: err\n        });\n      });\n  }\n\n  generateQuote = () => {\n    // get a random number from 1 to quotes length\n    const randomNumber = Math.floor(\n      Math.random() * this.state.quotesArrayLength + 1\n    );\n    this.setState({\n      author: this.state.apiResult[randomNumber].author,\n      text: this.state.apiResult[randomNumber].quote\n    });\n  };\n\n  generateColor = () => {\n    var colorArray = [\n      \"#FF6633\",\n      \"#FFB399\",\n      \"#FF33FF\",\n      \"#FFFF99\",\n      \"#00B3E6\",\n      \"#E6B333\",\n      \"#3366E6\",\n      \"#999966\",\n      \"#99FF99\",\n      \"#B34D4D\",\n      \"#80B300\",\n      \"#809900\",\n      \"#E6B3B3\",\n      \"#6680B3\",\n      \"#66991A\",\n      \"#FF99E6\",\n      \"#CCFF1A\",\n      \"#FF1A66\",\n      \"#E6331A\",\n      \"#33FFCC\",\n      \"#66994D\",\n      \"#B366CC\",\n      \"#4D8000\",\n      \"#B33300\",\n      \"#CC80CC\",\n      \"#66664D\",\n      \"#991AFF\",\n      \"#E666FF\",\n      \"#4DB3FF\",\n      \"#1AB399\",\n      \"#E666B3\",\n      \"#33991A\",\n      \"#CC9999\",\n      \"#B3B31A\",\n      \"#00E680\",\n      \"#4D8066\",\n      \"#809980\",\n      \"#E6FF80\",\n      \"#1AFF33\",\n      \"#999933\",\n      \"#FF3380\",\n      \"#CCCC00\",\n      \"#66E64D\",\n      \"#4D80CC\",\n      \"#9900B3\",\n      \"#E64D66\",\n      \"#4DB380\",\n      \"#FF4D4D\",\n      \"#99E6E6\",\n      \"#6666FF\"\n    ];\n    // Get a random color from array\n    let randomNumber = Math.floor(Math.random() * colorArray.length + 1);\n    this.setState({\n      bgColor: colorArray[randomNumber]\n    });\n  };\n\n  shareOnTwitter = () => {\n    window.open(`https://twitter.com/intent/tweet?text=${this.state.text}`);\n  };\n  render() {\n    return (\n      <div id=\"main\">\n        <style>\n          {`\n            :root {\n              --backgroundColor: ${this.state.bgColor};\n              \n            }\n            \n          `}\n        </style>\n        <h3 id=\"title\">Random Quote Machine</h3>\n        <div id=\"quote-box\">\n          <div id=\"content\">\n            <p id=\"text\">\" {this.state.text} \"</p>\n            <p id=\"author\">- {this.state.author}</p>\n          </div>\n\n          <div id=\"button\">\n            <a\n              className=\"button\"\n              id=\"tweet-quote\"\n              href={\"https://twitter.com/intent/tweet?text=\" + this.state.text}\n            >\n              Tweet{\" \"}\n            </a>\n\n            <button\n              className=\"button\"\n              id=\"new-quote\"\n              onClick={this.handleClick}\n            >\n              New Quote\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}